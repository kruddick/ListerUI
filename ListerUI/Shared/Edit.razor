@using ListerUI.Models
@using ListerUI.Repositories

@inject INodeRepository nodeRepository;

@if (this.Node != null)
{
    <div class="d-flex justify-content-between p-2 border-bottom border-left" style="@GetStyle()">
        <div>
            <div>
                @(
            this.Node.GetPlacementString()
            )
            </div>
        </div>
        <div>
            <div>
                @this.Node.Name
            </div>
        </div>
        <div class="d-flex">
            <div>
                <div class="ml-1 mr-1 mb-1">
                    <button class="btn btn-success pl-2 pr-2" @onclick="AddSubNode"><span class="oi oi-plus"><span class="oi oi-data-transfer-download"></span></span></button>
                </div>
                <div class="ml-1 mr-1">
                    @if (this.NodeList.GetSubNodes(this.Node).Count > 0)
                    {
                        @if (this.Node.ShowSubList)
                        {
                            <button class="btn btn-primary pl-2 pr-2" @onclick="ToggleSubNodes"><span class="oi oi-fullscreen-exit"></span></button>
                        }
                        else
                        {
                            <button class="btn btn-primary pl-2 pr-2" @onclick="ToggleSubNodes"><span class="oi oi-fullscreen-enter"></span></button>
                        }
                    }
                </div>
            </div>

            <div class="ml-1 mr-1">
                <div class="ml-1 mr-1 mb-1">
                    <button class="btn btn-warning pl-2 pr-2" @onclick="@(() => EditNode(this.Node))"><span class="oi oi-wrench"></span></button>
                </div>
                <div class="ml-1 mr-1">
                     <button class="btn btn-danger pl-2 pr-2" @onclick="DeleteNode"><span class="oi oi-minus"></span></button>
                </div>
            </div>
            <div>
                <div class="ml-1 mr-1 mb-1">
                    <button class="btn btn-primary pl-2 pr-2" @onclick="AddNodeBefore"><span class="oi oi-arrow-thick-top"></span></button>
                </div>
                <div class="ml-1 mr-1">
                    <button class="btn btn-primary pl-2 pr-2" @onclick="AddNodeAfter"><span class="oi oi-arrow-thick-bottom"></span></button>
                </div>
            </div>
        </div>
    </div>

    @if (this.Node.ShowSubList)
    {
        @foreach (var node in NodeList.GetSubNodes(this.Node))
        {
            <div style="padding-left: @(this.Node.Indent * 10)px">
                <Edit Node="@node" 
                    NodeList="@this.NodeList"
                    OnEditNode="@EditNode"/>
            </div>
        }
        <div class="mb-3"></div>
    }
}

@code {

    [Parameter]
    public EventCallback<bool> OnNodeStateChanged { get; set; }

    [Parameter]
    public EventCallback<Node> OnEditNode { get; set; }

    [Parameter]
    public Node Node { get; set; }

    [Parameter]
    public NodeList NodeList { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    private void ToggleSubNodes()
    {
        if (this.Node == null) return;

        this.Node.ShowSubList = !this.Node.ShowSubList;
        StateHasChanged();
    }

    private async void AddSubNode()
    {
        if (this.Node == null) return;
        if (this.NodeList == null) return;

        var subNode = this.NodeList.AddSubNode(this.Node);
        //nodeRepository.SaveNode(subNode); 
        this.Node.ShowSubList = true;
        await OnEditNode.InvokeAsync(subNode);
        StateHasChanged();
    }

    private async void AddNodeBefore()
    {
        if (this.Node == null) return;
        if (this.NodeList == null) return;

        var newNode = NodeList.AddNodeBefore(this.Node);

        //nodeRepository.SaveNode(newNode);
        //if (OnNodeStateChanged.HasDelegate == false) return;
        //await OnNodeStateChanged.InvokeAsync();
        await OnEditNode.InvokeAsync(newNode);
    }

    private async void AddNodeAfter()
    {
        if (this.Node == null) return;
        if (this.NodeList == null) return;

        var newNode = NodeList.AddNodeAfter(this.Node);

        //nodeRepository.SaveNode(newNode);
        //if (OnNodeStateChanged.HasDelegate == false) return;
        //await OnNodeStateChanged.InvokeAsync(true);
        await OnEditNode.InvokeAsync(newNode);
    }

    private void DeleteNode()
    {
        if (this.Node == null) return;
        if (this.NodeList == null) return;

        NodeList.RemoveNode(this.Node);
        this.Node = null;
    }

    public string GetStyle()
    {
        if (this.Node == null) return "";

        switch (this.Node.Indent)
        {
            case 1:
                return "background-color:#808080; margin-top: 5px;";
            case 2:
                return "background-color: #A9A9A9;";
            case 3:
                return "background-color: #BEBEBE";
            case 4:
                return "background-color: #D3D3D3";
            default:
                return "";
        }
    }

    public void EditNode(Node node) => OnEditNode.InvokeAsync(node); 
    //public void PeerNodesAdded(bool changeState) => StateHasChanged();
}
