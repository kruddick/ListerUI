@using ListerUI.Models
@using ListerUI.Repositories

@inject INodeRepository nodeRepository;

@if (this.Node != null)
{
    <div style="@GetStyle()">
        <div>

        </div>
        <div>

        </div>
    </div>



    <div class="d-flex justify-content-between p-2 border-bottom border-left" style="@GetStyle()">

        <div>
            <div>
                @(
            this.Node.GetPlacementString()
            )
            </div>
        </div>
        <div>
            <div>
                @this.Node.Name
            </div>
        </div>
        
        <div class="d-flex">
            <div>
                <div class="ml-1 mr-1">
                    @if (this.NodeList.GetSubNodes(this.Node).Count > 0)
                    {
                        @if (this.Node.ShowSubList)
                        {
                            <button class="btn btn-primary pl-2 pr-2" @onclick="ToggleSubNodes"><span class="oi oi-fullscreen-exit"></span></button>
                        }
                        else
                        {
                            <button class="btn btn-primary pl-2 pr-2" @onclick="ToggleSubNodes"><span class="oi oi-fullscreen-enter"></span></button>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-evenly">
        <div>
            <button class="btn btn-primary">Claim</button>
        </div>
        <div>
            <button class="btn btn-primary">Start</button>
        </div>
        <div>
            <button class="btn btn-primary">Finish</button>
        </div>
        <div>
            <button class="btn btn-primary">Complete</button>
        </div>
    </div>

    @if (this.Node.ShowSubList)
    {
        @foreach (var node in NodeList.GetSubNodes(this.Node))
        {
            <div style="padding-left: @(this.Node.Indent * 10)px">
                <Display Node="@node"
             NodeList="@this.NodeList"
             OnNodeStateChanged="PeerNodesAdded" />
            </div>
        }
        <div class="mb-3"></div>
    }
}

@code {

    [Parameter]
    public EventCallback<bool> OnNodeStateChanged { get; set; }

    [Parameter]
    public Node Node { get; set; }

    [Parameter]
    public NodeList NodeList { get; set; }

    public bool Claimed { get; set; } = false;
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public bool Complete { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    private void ToggleSubNodes()
    {
        if (this.Node == null) return;
        this.Node.ShowSubList = !this.Node.ShowSubList;
        StateHasChanged();
    }

    public string GetStyle()
    {
        switch (Node.Indent)
        {
            case 1:
                return "background-color:#808080; margin-top: 5px;";
            case 2:
                return "background-color: #A9A9A9;";
            case 3:
                return "background-color: #BEBEBE";
            case 4:
                return "background-color: #D3D3D3";
            default:
                return "";
        }
    }

    public void PeerNodesAdded(bool changeState) => StateHasChanged();
}